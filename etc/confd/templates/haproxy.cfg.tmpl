{{/* Template for CIDRS: Required for reuse in Http and Https frontends */}}
{{define "CIDR_ACLS"}}{{if ls "/global/acls"}}{{ range $acl := gets "/global/acls/*/cidr/src" }}
    acl {{$acl.Key | dir | dir | base}} src {{$acl.Value}}
{{ end }}{{ end }}{{ end }}

{{/* Global Black Listing */}}
{{define "GLOBAL_BLACKLIST"}}{{if ls "/global/acls/global-black-list/cidr"}}
    http-request deny if global-black-list
{{ end }}{{ end }}

{{/* Global Black Listing (TCP) */}}
{{define "GLOBAL_BLACKLIST_TCP"}}{{if ls "/global/acls/global-black-list/cidr"}}
    tcp-request connection reject if global-black-list
{{ end }}{{ end }}

{{/* Template for use_backends. */}}
{{define "USE_BACKENDS"}}{{ range $host := ls "/hosts" }}{{if printf "/hosts/%s/locations" $host | ls }}{{ range $path := printf "/hosts/%s/locations/*/path" $host | gets}}{{ $pathName := $path.Key | dir | base }}
{{/* Do not include backends if upstream is empty or if it does not exist */}}
    {{ $upstream := printf "/hosts/%s/locations/%s/upstream" $host $pathName | getv}}{{ $endpoints := printf "/upstreams/%s/endpoints" $upstream | ls}}
    {{if and $upstream $endpoints}}use_backend {{printf "/hosts/%s/locations/%s/upstream" $host $pathName | getv }} if __host-{{$host}} __path-{{$host}}-{{$pathName}}{{ end }}
{{ end }}{{ end }}{{ end }}{{ end }}

{{/* Template for force ssl */}}
{{define "FORCE_SSL"}}{{ range $host := ls "/hosts" }}{{if printf "/hosts/%s/locations" $host | ls }}{{ range $path := printf "/hosts/%s/locations/*/path" $host | gets}}{{ $pathName := $path.Key | dir | base }}
    {{ if printf "/hosts/%s/locations/%s" $host $pathName | ls}}{{ if printf "/hosts/%s/locations/%s/force-ssl" $host $pathName | ls}}{{ if printf "/hosts/%s/locations/%s/force-ssl" $host $pathName | getv | eq "true"}}
    #Force SSL for $host/$pathName
    redirect scheme https code 301 if !{ ssl_fc } __host-{{$host}} __path-{{$host}}-{{$pathName}}
    {{ end }}{{ end }}{{ end }}
{{ end }}{{ end }}{{ end }}{{ end }}

{{/* Template for Host ACLS and use_backend: Required for reuse in Http and Https frontends */}}
{{define "HOST_ACLS"}}
    {{ range $host := ls "/hosts" }}
    #Host ACL for host:{{$host}}
    acl __host-{{$host}} hdr_dom(host) -i -m str {{$host}} {{ if printf "/hosts/%s/aliases" $host | ls }}{{range $alias := printf "/hosts/%s/aliases/*" $host | getvs }}{{$alias}} {{ end }}{{ end }}
    {{ range $path := printf "/hosts/%s/locations/*/path" $host | gets}}{{ $pathName := $path.Key | dir | base }}
    #Path ACL for host:{{$host}} and path:{{$path}}
    acl __path-{{$host}}-{{$pathName}} path_beg {{$path.Value}}
{{/* Deny Requests if host, path matches and any of cidrs matches */}}
    {{if printf "/hosts/%s/locations/%s/acls/denied" $host $pathName | ls }}
    #Denied ACL for {{$host}}/{{$pathName}}
    http-request deny if {{range printf "/hosts/%s/locations/%s/acls/denied/*" $host $pathName  | getvs}} __host-{{$host}} __path-{{$host}}-{{$pathName}} {{.}} or{{ end }}
    {{ end }}

    {{if printf "/hosts/%s/locations/%s/acls/allowed" $host $pathName | ls }}
{{/* Deny Requests if host, path matches but cidr does not */}}
    #Allowed ACLs for {{$host}}/{{$pathName}}
    {{range printf "/hosts/%s/locations/%s/acls/allowed/*" $host $pathName | getvs}}
    http-request allow if __host-{{$host}} __path-{{$host}}-{{$pathName}} {{.}}
    {{ end }}{{ end }}{{end}}{{end}}
    http-request deny
{{ end }}



global
    log /dev/log	local0
    log /dev/log	local1 notice
    log-tag {{getenv "LOG_IDENTIFIER"}}
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy
    daemon

    # Default SSL material locations
    ca-base /etc/ssl/certs
    crt-base /etc/ssl/private

    # Default ciphers to use on SSL-enabled listening sockets.
    # For more information, see ciphers(1SSL).
    ssl-default-bind-ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4
    ssl-default-server-ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EECDH+aRSA+SHA256:EECDH+aRSA+RC4:EECDH:EDH+aRSA:RC4:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4
    tune.ssl.default-dh-param 2048

defaults
    log	global
    mode	http
    option	httplog
    option	dontlognull
    option tcpka
    option redispatch
    timeout connect 5s
    timeout client  615s
    timeout server  615s
    timeout client-fin  30s
    timeout tunnel  1h
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

{{ if ls "/global/listeners/http/" }}
#Http frontend
frontend http-in
    bind {{ getv "/global/listeners/http/bind" }}

    #CIDR ACLs
    {{ template "CIDR_ACLS" }}

    #Global Blacklist
    {{ template "GLOBAL_BLACKLIST" }}

    #Host ACLs
    acl host-{{ getv "/global/hostname" }} hdr_dom(host) -i -m str {{ getv "/global/hostname" }}

    #Dynamic ACLs
    {{ template "HOST_ACLS" }}

    #Force SSL
    {{ template "FORCE_SSL" }}

    #Use Backends
    {{ template "USE_BACKENDS" }}
    use_backend admin if host-{{ getv "/global/hostname" }}
{{ end }}

{{ if ls "/global/listeners/https" }}
#Https frontend
frontend https-in
    bind {{ getv "/global/listeners/https/bind" }}  ssl crt /etc/haproxy/certs.d/default.pem no-sslv3 crt /etc/haproxy/certs.d no-sslv3
    {{ template "CIDR_ACLS" }}

    #Global Blacklist
    {{ template "GLOBAL_BLACKLIST" }}

    #Host ACLs
    acl host-{{ getv "/global/hostname" }} hdr_dom(host) -i -m str {{ getv "/global/hostname" }}

    #Dynamic ACLs
    {{ template "HOST_ACLS" }}

    #Additional Headers
    reqadd X-Forwarded-Proto:\ https

    #Force SSL
    {{ template "FORCE_SSL" }}

    #Use Backends
    {{ template "USE_BACKENDS" }}

    #SSL Related Options
    option http-server-close
    option forwardfor
    # rspadd Strict-Transport-Security:\ max-age=31536000;\ includeSubdomains;\ preload
    rspadd X-Frame-Options:\ DENY

{{ end }}

#TCP Frontends
{{ range $listener := ls "/global/listeners/tcp" }}{{ $listener_path := printf "/global/listeners/tcp/%s" $listener}}{{if printf "%s/bind" $listener_path | ls }}
frontend {{ $listener }}
    bind {{ printf "%s/bind" $listener_path  | getv }}
    mode tcp
    option tcplog
    timeout connect 20s
    timeout client 3h
    timeout server 3h
    retries 30

    #CIDR ACLs
    {{ template "CIDR_ACLS" }}

    #Global Blacklist
    {{ template "GLOBAL_BLACKLIST_TCP" }}

    {{ if printf "%s/acls/denied" $listener_path  | ls }}
    tcp-request  connection reject if {{range printf "%s/acls/denied/*" $listener_path | getvs}} {{.}} or{{ end }}
    {{ end }}

    {{ if printf "%s/acls/allowed" $listener_path  | ls }}
    tcp-request  connection reject if {{range printf "%s/acls/allowed/*" $listener_path | getvs }}!{{.}} {{ end }}
    {{ end }}

    {{ if printf "%s/upstream" $listener_path  | ls}}{{ $upstream := printf "%s/upstream" $listener_path | getv }}
    {{ if printf "/upstreams/%s" $upstream | ls }}{{ if printf "/upstreams/%s/endpoints" $upstream | ls }}use_backend {{ $upstream }}{{ end }}{{ end }}
    {{ end }}

{{ end }}{{ end }}


#Define all the backends
{{ range $upstream := ls "/upstreams" }}{{ if printf "/upstreams/%s/endpoints" $upstream | ls }}
backend {{ $upstream }}
   balance roundrobin
   mode {{ if printf "/upstreams/%s/mode" $upstream | ls }}{{printf "/upstreams/%s/mode" $upstream | getv}}{{ else }}http{{ end }}
   {{ $health := printf "/upstreams/%s/health" $upstream }} {{ $health_uri := printf "%s/uri" $health }} {{ $health_timeout := printf "%s/timeout" $health }}
   {{ $health_interval := printf "%s/interval" $health }}
   {{ if $health_uri | ls }}option httpchk GET {{ $health_uri | getv }}{{ end }}
   {{ if $health_timeout | ls }}timeout check {{ $health_timeout | getv }}{{ end }}
   {{ range $endpoint := printf "/upstreams/%s/endpoints/*" $upstream | gets }}{{ $endpointName := $endpoint.Key | dir | base }}
   server {{ $endpointName }} {{ $endpoint.Value }}  check inter {{ if $health_interval | ls }}{{$health_interval | getv}}{{ else }}2m{{ end }}
   {{ end }}
{{ end }}{{ end }}

{{ if ls "/global/listeners/admin" }}
listen admin
    bind {{ getv "/global/listeners/admin/bind" }}
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /
{{ end }}

{{ if ls "/global/control" }}
##Reload Control Flag: {{ getv "/global/control/reload" }}
{{ end }}
