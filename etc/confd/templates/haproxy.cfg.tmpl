{{/* Template for CIDRS: Required for reuse in Http and Https frontends */}}
{{define "CIDR_ACLS"}}{{ range $acl := gets "/global/acls/cidrs/*" }}
    acl cidr-{{base $acl.Key}} src {{$acl.Value}}
{{end}}{{end}}

{{/* Template for Host ACLS and use_backend: Required for reuse in Http and Https frontends */}}
{{define "HOST_ACLS"}}
    {{ range $host := ls "/hosts" }}
    acl host-{{$host}} hdr_dom(host) -i {{$host}}
    {{ range $path := printf "/hosts/%s/locations/*/path" $host | gets}}{{ $pathName := $path.Key | parent | base }}
    acl path-{{$host}}-{{$pathName}} path_beg {{parent $path.Value}}
    #acl cidr-allowed-{{$host}}-{{$pathName}} src {{range printf "/hosts/%s/locations/%s/allowed-cidrs/*" $host $pathName | getvs}}cidr-{{.}}{{end}}
{{/* Deny Requests if host, path matches but cidr does not */}}
    http-request deny if host-{{$host}} path-{{$host}}-{{$pathName}} {{range printf "/hosts/%s/locations/%s/allowed-cidrs/*" $host $pathName | getvs}} !cidr-{{.}}{{end}}
    use_backend {{printf "/hosts/%s/locations/%s/upstream" $host $pathName | getv }} if host-{{$host}} path-{{$host}}-{{$pathName}}
  {{ end }}{{ end }}
{{end}}

{{/* Global Black Listing */}}
{{define "GLOBAL_BLACKLIST"}}
    acl cidr-global-black-list src {{ getv "/global/acls/cidrs/global-black-list" }}
    http-request deny if cidr-global-black-list
{{end}}


global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# Default ciphers to use on SSL-enabled listening sockets.
	# For more information, see ciphers(1SSL).
	ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

#Http frontend
frontend http-in
    bind {{ getv "/global/listeners/http/bind" }}

    #CIDR ACLs
    {{ template "CIDR_ACLS" }}

    #Global Blacklist
    {{ template "GLOBAL_BLACKLIST" }}

    #Host ACLs
    acl host-{{ getv "/global/hostname" }} hdr_dom(host) -i {{ getv "/global/hostname" }}
    use_backend admin if host-{{ getv "/global/hostname" }}

    {{ template "HOST_ACLS" }}

#Https frontend
frontend https-in
  bind {{ getv "/global/listeners/https/bind" }}  ssl crt /etc/haproxy/certs.d ciphers ECDHE-RSA-AES256-SHA:RC4-SHA:RC4:HIGH:!MD5:!aNULL:!EDH:!AESGCM

  #CIDR ACLs
  {{ template "CIDR_ACLS" }}

  #Global Blacklist
  {{ template "GLOBAL_BLACKLIST" }}

  #Host ACLs
  {{ template "HOST_ACLS" }}

#Define all the backends
{{ range $upstream := ls "/upstreams" }}
backend {{$upstream}}
   balance roundrobin
   mode http
   {{ range $endpoint := printf "/upstreams/%s/endpoints/*" $upstream | gets }}{{ $endpointName := $endpoint.Key | parent | base }}
   server {{$endpointName}} {{$endpoint.Value}}  check
   {{end}}
{{ end }}

listen admin
    bind {{ getv "/global/listeners/admin/bind" }}
    stats enable
    stats hide-version
    stats realm Haproxy\ Statistics
    stats uri /

##Reload Control Flag: {{ getv "/global/control/reload" }}